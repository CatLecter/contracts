// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: iam/v1/user_group/user_group.proto

package user_group

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserGroups_Get_FullMethodName                   = "/iam.user_group.UserGroups/Get"
	UserGroups_Search_FullMethodName                = "/iam.user_group.UserGroups/Search"
	UserGroups_Create_FullMethodName                = "/iam.user_group.UserGroups/Create"
	UserGroups_Update_FullMethodName                = "/iam.user_group.UserGroups/Update"
	UserGroups_Delete_FullMethodName                = "/iam.user_group.UserGroups/Delete"
	UserGroups_AddUsersToGroups_FullMethodName      = "/iam.user_group.UserGroups/AddUsersToGroups"
	UserGroups_DeleteUsersFromGroups_FullMethodName = "/iam.user_group.UserGroups/DeleteUsersFromGroups"
)

// UserGroupsClient is the client API for UserGroups service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserGroupsClient interface {
	Get(ctx context.Context, in *UserGroupBriefRequest, opts ...grpc.CallOption) (*UserGroupResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Create(ctx context.Context, in *CreateUserGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Update(ctx context.Context, in *UpdateUserGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *UserGroupBriefRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddUsersToGroups(ctx context.Context, in *UsersInGroups, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteUsersFromGroups(ctx context.Context, in *UsersInGroups, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userGroupsClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGroupsClient(cc grpc.ClientConnInterface) UserGroupsClient {
	return &userGroupsClient{cc}
}

func (c *userGroupsClient) Get(ctx context.Context, in *UserGroupBriefRequest, opts ...grpc.CallOption) (*UserGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserGroupResponse)
	err := c.cc.Invoke(ctx, UserGroups_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupsClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, UserGroups_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupsClient) Create(ctx context.Context, in *CreateUserGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserGroups_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupsClient) Update(ctx context.Context, in *UpdateUserGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserGroups_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupsClient) Delete(ctx context.Context, in *UserGroupBriefRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserGroups_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupsClient) AddUsersToGroups(ctx context.Context, in *UsersInGroups, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserGroups_AddUsersToGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupsClient) DeleteUsersFromGroups(ctx context.Context, in *UsersInGroups, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserGroups_DeleteUsersFromGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGroupsServer is the server API for UserGroups service.
// All implementations must embed UnimplementedUserGroupsServer
// for forward compatibility.
type UserGroupsServer interface {
	Get(context.Context, *UserGroupBriefRequest) (*UserGroupResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Create(context.Context, *CreateUserGroupRequest) (*emptypb.Empty, error)
	Update(context.Context, *UpdateUserGroupRequest) (*emptypb.Empty, error)
	Delete(context.Context, *UserGroupBriefRequest) (*emptypb.Empty, error)
	AddUsersToGroups(context.Context, *UsersInGroups) (*emptypb.Empty, error)
	DeleteUsersFromGroups(context.Context, *UsersInGroups) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserGroupsServer()
}

// UnimplementedUserGroupsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserGroupsServer struct{}

func (UnimplementedUserGroupsServer) Get(context.Context, *UserGroupBriefRequest) (*UserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserGroupsServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedUserGroupsServer) Create(context.Context, *CreateUserGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserGroupsServer) Update(context.Context, *UpdateUserGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserGroupsServer) Delete(context.Context, *UserGroupBriefRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserGroupsServer) AddUsersToGroups(context.Context, *UsersInGroups) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUsersToGroups not implemented")
}
func (UnimplementedUserGroupsServer) DeleteUsersFromGroups(context.Context, *UsersInGroups) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsersFromGroups not implemented")
}
func (UnimplementedUserGroupsServer) mustEmbedUnimplementedUserGroupsServer() {}
func (UnimplementedUserGroupsServer) testEmbeddedByValue()                    {}

// UnsafeUserGroupsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserGroupsServer will
// result in compilation errors.
type UnsafeUserGroupsServer interface {
	mustEmbedUnimplementedUserGroupsServer()
}

func RegisterUserGroupsServer(s grpc.ServiceRegistrar, srv UserGroupsServer) {
	// If the following call pancis, it indicates UnimplementedUserGroupsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserGroups_ServiceDesc, srv)
}

func _UserGroups_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupBriefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroups_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupsServer).Get(ctx, req.(*UserGroupBriefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroups_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupsServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroups_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupsServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroups_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroups_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupsServer).Create(ctx, req.(*CreateUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroups_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroups_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupsServer).Update(ctx, req.(*UpdateUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroups_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupBriefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroups_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupsServer).Delete(ctx, req.(*UserGroupBriefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroups_AddUsersToGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersInGroups)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupsServer).AddUsersToGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroups_AddUsersToGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupsServer).AddUsersToGroups(ctx, req.(*UsersInGroups))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroups_DeleteUsersFromGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersInGroups)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupsServer).DeleteUsersFromGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroups_DeleteUsersFromGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupsServer).DeleteUsersFromGroups(ctx, req.(*UsersInGroups))
	}
	return interceptor(ctx, in, info, handler)
}

// UserGroups_ServiceDesc is the grpc.ServiceDesc for UserGroups service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserGroups_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iam.user_group.UserGroups",
	HandlerType: (*UserGroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _UserGroups_Get_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _UserGroups_Search_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _UserGroups_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserGroups_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserGroups_Delete_Handler,
		},
		{
			MethodName: "AddUsersToGroups",
			Handler:    _UserGroups_AddUsersToGroups_Handler,
		},
		{
			MethodName: "DeleteUsersFromGroups",
			Handler:    _UserGroups_DeleteUsersFromGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iam/v1/user_group/user_group.proto",
}
